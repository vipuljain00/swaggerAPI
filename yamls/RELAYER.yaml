openapi: 3.0.0

info:
  description: The Relayer Service API allows registering and updating safleId with associated addresses and coins.
  version: "1.0.0"
  title: Relayer Service API

servers:
  - description: Development environment
    url: https://dev-relayer.getsafle.com
  - description: Testing environment
    url: https://test-relayer.getsafle.com
  - description: Staging environment
    url: https://stage-relayer.getsafle.com
  - description: Production environment
    url: https://b-relayer.getsafle.com
    
paths:
  /set-safleid:
    post:
      summary: Register a safleId with a public address
      tags: 
        - Relayer Service
      operationId: setSafleId
      requestBody:
        description: SafleId registration request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetSafleIdRequest'
        required: true
      security:
        - bearerAuth: []
      responses:
        '201':
          description: Safle ID registered successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetSafleIdSuccess'
        '400':
          description: Field validation or recovery failure
          content:
            application/json:
              examples:
                fieldValidation:
                  summary: "Field Validation"
                  value:
                    statusCode: 400
                    type: "field-validation"
                    details:
                      name: "field validation error name"
                      message: "field validation error message"
                recoveryFailedForSignedData:
                  summary: "The recovery fails for the signed data"
                  value:
                    statusCode: 400
                    type: "field-validation"
                    details:
                      name: "signedData"
                      message: "Signed data doesn't belong to the provided public address."
                safleIdRegisterationPaused:
                  summary: "The safleId registration is paused"
                  value:
                    statusCode: 400
                    type: "field-validation"
                    details:
                      name: "SafleId"
                      message: "SafleId registration is currently on hold"
                jsonrpcFacingDowntime:
                  summary: "JSON RPC is facing downtime"
                  value:
                    statusCode: 400
                    type: "field-validation"
                    details:
                      name: "JSON RPC"
                      message: "Invalid JSON RPC error."
                transactionThrowsnAnError:
                  summary: "The address is already registered to another safleId"
                  value:
                    statusCode: 400
                    type: "field-validation"
                    details:
                      name: "address"
                      message: "This address is already mapped to another safleId"
                alreadyRegisteredToAnotherSafleId:
                  summary: "The transaction throws an error"
                  value:
                    statusCode: 400
                    type: "field-validation"
                    details:
                      name: "address & safleId"
                      message: error message
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedAcess'                

  /update-safleid:
    post:
      summary: Update the safleId registered with a public address
      tags: 
        - Relayer Service
      operationId: updateSafleId
      requestBody:
        description: SafleId update request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSafleIdRequest'
        required: true
      security:
        - bearerAuth: []
      responses:
        '201':
          description: Safle ID updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateSafleIdSuccess'
        '400':
          description: Field validation or recovery failure
          content:
            application/json:
              examples:
                fieldValidation:
                  summary: "Field Validation"
                  value:
                    statusCode: 400
                    type: "field-validation"
                    details:
                      name: "field validation error name"
                      message: "field validation error message"
                recoveryFailsForTheSigneddata:
                  summary: "The recovery fails for the signed data"
                  value:
                    statusCode: 400
                    type: "field-validation"
                    details:
                      name: "signedData"
                      message: "Signed data doesn't belong to the provided public address."
                SafleIdupdatedMoreThanTwice:
                  summary: "SafleId has been updated more than twice"
                  value:
                    statusCode: 400
                    type: "field-validation"
                    details:
                      name: "safleId"
                      message: "You cannot update safleId more than twice"
                jsonrpcFacingDowntime:
                  summary: "JSON RPC is facing downtime"
                  value:
                    statusCode: 400
                    type: "field-validation"
                    details:
                      name: "JSON RPC"
                      message: "Invalid JSON RPC error."
                oldSafleIdNotRegisteredToAddress:
                  summary: "The old safleId passed is not registered to the address"
                  value:
                    statusCode: 400
                    type: "field-validation"
                    details:
                      name: "safleId"
                      message: "The previous safleId passed is not mapped to your address"
                newSafleIdPassedAlreadyRegisteredToAnotherAddress:
                  summary: "The new safleId passed is already registered to another address"
                  value:
                    statusCode: 400
                    type: "field-validation"
                    details:
                      name: "safleId"
                      message: "The new safleId is already mapped to another address"
                SafleIdRegistrationCurrentlyPaused:
                  summary: "SafleId registration is currently paused"
                  value:
                    statusCode: 400
                    type: "field-validation"
                    details:
                      name: "safleId"
                      message: "safleId registration is currently paused"
                transactionThrowsError:
                  summary: "The transaction throws an error"
                  value:
                    statusCode: 400
                    type: "field-validation"
                    details:
                      name: "address & safleId"
                      message: "error message"
                addressAlreadyTaken:
                  summary: "If address is already taken"
                  value:
                    statusCode: 400
                    type: "field-validation"
                    details:
                      name: "address"
                      message: "This address is already mapped to another safleId"
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedAcess'            
                
  /register-other-coin:
    post:
      summary: Register other coin address with SafleID
      tags:
        - Relayer Service
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterCoinRequest'
      responses:
        '201':
          description: Coin address registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterCoinSuccessResponse'
        '400':
          description: Validation error or other issues
          content:
            application/json:
              examples:
                fieldValidation:
                  summary: "Field Validation"
                  value:
                    statusCode: 400
                    type: "field-validation"
                    details:
                      name: "field validation error name"
                      message: "field validation error message"
                recoveryFailsForTheSigneddata:
                  summary: "The recovery fails for the signed data"
                  value:
                    statusCode: 400
                    type: "field-validation"
                    details:
                      name: "signedData"
                      message: "Signed data doesn't belong to the provided public address."
                safleIdPassedNotMappedToUserAddress:
                  summary: "The safleId passed is not mapped to the userâ€™s address"
                  value:
                    statusCode: 400
                    type: "field-validation"
                    details:
                      name: "safleId"
                      message: "The safleId passed is not mapped to your address"
                jsonrpcFacingDowntime:
                  summary: "JSON RPC is facing downtime"
                  value:
                    statusCode: 400
                    type: "field-validation"
                    details:
                      name: "JSON RPC"
                      message: "Invalid JSON RPC error."
                coinForWhichTheAddressBeingRegisteredNotMappedByRelayer:
                  summary: "The coin for which the address is being registered is not mapped by the relayer"
                  value:
                    statusCode: 400
                    type: "field-validation"
                    details:
                      name: "coinId"
                      message: "Please map this coin first before registration"
                coinAddressAlreadyRegistered:
                  summary: "The coin address is already registered"
                  value:
                    statusCode: 400
                    type: "field-validation"
                    details:
                      name: "coinAddress"
                      message: "This coin is already mapped."
                coinAddressPassedAlreadyMappedToAnotherSafleId:
                  summary: "The coin address passed is already mapped to another safleId"
                  value:
                    statusCode: 400
                    type: "field-validation"
                    details:
                      name: "address"
                      message: "This address is already mapped to another safleId"  
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedAcess'  
      security:
        - bearerAuth: []
        
  /update-other-coin:
    post:
      summary: Update the registered other coin address
      tags:
        - Relayer Service
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCoinRequest'
      responses:
        '201':
          description: Coin address updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateCoinSuccessResponse'
        '400':
          description: Validation error or other issues
          content:
            application/json:
              examples:
                fieldValidation:
                  summary: "Field Validation"
                  value:
                    statusCode: 400
                    type: "field-validation"
                    details:
                      name: "field validation error name"
                      message: "field validation error message"
                recoveryFailsForTheSigneddata:
                  summary: "The recovery fails for the signed data"
                  value:
                    statusCode: 400
                    type: "field-validation"
                    details:
                      name: "signedData"
                      message: "Signed data doesn't belong to the provided public address."
                safleIdPassedNotMappedToUserAddress:
                  summary: "The safleId passed is not mapped to the userâ€™s address"
                  value:
                    statusCode: 400
                    type: "field-validation"
                    details:
                      name: "safleId"
                      message: "The safleId passed is not mapped to your address"
                jsonrpcFacingDowntime:
                  summary: "JSON RPC is facing downtime"
                  value:
                    statusCode: 400
                    type: "field-validation"
                    details:
                      name: "JSON RPC"
                      message: "Invalid JSON RPC error."
                coinForWhichTheAddressBeingRegisteredNotMappedByRelayer:
                  summary: "The coin for which the address is being registered is not mapped by the relayer"
                  value:
                    statusCode: 400
                    type: "field-validation"
                    details:
                      name: "coinId"
                      message: "Please map this coin first before registration"
                newCoinAddressAlreadyRegistered:
                  summary: "The new coin address is already registered"
                  value:
                    statusCode: 400
                    type: "field-validation"
                    details:
                      name: "newCoinAddress"
                      message: "This coin is already mapped."
                oldCoinAddressAlreadyRegistered:
                  summary: "The old coin address is already registered"
                  value:
                    statusCode: 400
                    type: "field-validation"
                    details:
                      name: "oldCoinAddress"
                      message: "The old coin address passed is invalid."
                transactionThrowsError:
                  summary: "The transaction throws an error"
                  value:
                    statusCode: 400
                    type: "field-validation"
                    details:
                      name: "address & safleId"
                      message: error message  
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedAcess'    
      security:
        - bearerAuth: []              

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    SetSafleIdRequest:
      type: object
      properties:
        userAdd:
          type: string
          example: "0x21645363CCF730E42Cb9b430F742420f1Ed612B0"
        signedData:
          type: object
          properties:
            message:
              type: string
            messageHash:
              type: string
            v:
              type: string
            r:
              type: string
            s:
              type: string
            signature:
              type: string
          example:
            message: "0x21645363CCF730E42Cb9b430F742420f1Ed612B0"
            messageHash: "0xbe2d1a2a9964337e9a8c8a762c205f299a7fdcd269428a9c9bd000dee33d759a"
            v: "0x1c"
            r: "0x649bcef7c8940ca43855ee7b9da522da23c0b4bb338493bdd9675ffb92d2c817"
            s: "0x174aea12cf47752c0c88d68ea911a6ef464a5eb3e09bb033b6143d7b46e3947e"
            signature: "0x649bcef7c8940ca43855ee7b9da522da23c0b4bb338493bdd9675ffb92d2c817174aea12cf47752c0c88d68ea911a6ef464a5eb3e09bb033b6143d7b46e3947e1c"
    
    SetSafleIdSuccess:
      type: object
      properties:
        statusCode:
          type: integer
          example: 201
        message:
          type: string
          example: "Safle ID registered successfully."
        data:
          type: object
          properties:
            transactionHash:
              type: string
              example: "0xabc123"
    
    FieldValidationdError:
      type: object
      properties:
        statusCode:
          type: integer
          example: 400
        type:
          type: string
          example: "field-validation"
        details:
          type: array
          items:
            type: object
            properties:
              message:
                type: string
                example: field validation error message.
              name:
                type: string
                example: field validation error name
    
    UpdateSafleIdRequest:
      type: object
      properties:
        userAdd:
          type: string
          example: "0x21645363CCF730E42Cb9b430F742420f1Ed612B0"
        previousSafleId:
          type: string
          example: "safleId1"
        newSafleId:
          type: string
          example: "safleId2"
        signedData:
          type: object
          properties:
            message:
              type: string
            messageHash:
              type: string
            v:
              type: string
            r:
              type: string
            s:
              type: string
            signature:
              type: string
          example:
            message: "0x21645363CCF730E42Cb9b430F742420f1Ed612B0"
            messageHash: "0xbe2d1a2a9964337e9a8c8a762c205f299a7fdcd269428a9c9bd000dee33d759a"
            v: "0x1c"
            r: "0x649bcef7c8940ca43855ee7b9da522da23c0b4bb338493bdd9675ffb92d2c817"
            s: "0x174aea12cf47752c0c88d68ea911a6ef464a5eb3e09bb033b6143d7b46e3947e"
            signature: "0x649bcef7c8940ca43855ee7b9da522da23c0b4bb338493bdd9675ffb92d2c817174aea12cf47752c0c88d68ea911a6ef464a5eb3e09bb033b6143d7b46e3947e1c"
    
    UpdateSafleIdSuccess:
      type: object
      properties:
        statusCode:
          type: integer
          example: 201
        message:
          type: string
          example: "Safle ID updated successfully."
        data:
          type: object
          properties:
            transactionHash:
              type: string
              example: "0xabc123"
            token:
              type: string
              example: "eyJhcvf..."

              
    RegisterCoinRequest:
      type: object
      required:
        - userAdd
        - safleId
        - coinAddress
        - coinId
        - chain
        - signedData
      properties:
        userAdd:
          type: string
          example: "0x21645363CCF730E42Cb9b430F742420f1Ed612B0"
        safleId:
          type: string
          example: "shubh59"
        coinAddress:
          type: string
          example: "0x21645363CCF730E42Cb9b430F742420f1Ed612B0"
        coinId:
          type: string
          example: "9007"
        chain:
          type: string
          example: "bsc"
        signedData:
          $ref: '#/components/schemas/SignedData'

    UpdateCoinRequest:
      type: object
      required:
        - userAdd
        - safleId
        - oldCoinAddress
        - newCoinAddress
        - coinId
        - chain
        - signedData
      properties:
        userAdd:
          type: string
          example: "0x21645363CCF730E42Cb9b430F742420f1Ed612B0"
        safleId:
          type: string
          example: "shubh59"
        oldCoinAddress:
          type: string
          example: "0x21645363CCF730E42Cb9b430F742420f1Ed612B0"
        newCoinAddress:
          type: string
          example: "0x42nsdfgfsg..."
        coinId:
          type: string
          example: "9007"
        chain:
          type: string
          example: bsc
        signedData:
          $ref: '#/components/schemas/SignedData'

    SignedData:
      type: object
      required:
        - message
        - messageHash
        - v
        - r
        - s
        - signature
      properties:
        message:
          type: string
          example: "0x21645363CCF730E42Cb9b430F742420f1Ed612B0"
        messageHash:
          type: string
          example: "0xbe2d1a2a9964337e9a8c8a762c205f299a7fdcd269428a9c9bd000dee33d759a"
        v:
          type: string
          example: "0x1c"
        r:
          type: string
          example: "0x649bcef7c8940ca43855ee7b9da522da23c0b4bb338493bdd9675ffb92d2c817"
        s:
          type: string
          example: "0x174aea12cf47752c0c88d68ea911a6ef464a5eb3e09bb033b6143d7b46e3947e"
        signature:
          type: string
          example: "0x649bcef7c8940ca43855ee7b9da522da23c0b4bb338493bdd9675ffb92d2c817174aea12cf47752c0c88d68ea911a6ef464a5eb3e09bb033b6143d7b46e3947e1c"

    RegisterCoinSuccessResponse:
      type: object
      properties:
        statusCode:
          type: integer
          example: 201
        message:
          type: string
          example: "Coin address registered successfully."
        data:
          type: object
          properties:
            transactionHash:
              type: string
              example: "0x1234567890abcdef"
              
    UpdateCoinSuccessResponse:
      type: object
      properties:
        statusCode:
          type: integer
          example: 201
        message:
          type: string
          example: "Coin address updated successfully."
        data:
          type: object
          properties:
            transactionHash:
              type: string
              example: "0x1234567890abcdef"

    OthercoinErrorResponse:
      type: object
      properties:
        statusCode:
          type: integer
          example: 400
        type:
          type: string
          example: "field-validation"
        details:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                example: "field validation error name"
              message:
                type: string
                example: "field validation error message"
    
    UnauthorizedAcess:
      type: object
      properties:
        statusCode: 
          type: integer
          example: 401